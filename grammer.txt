fun my_function(argument -> ARGUMENT_TYPE, argument2 -> ARGUMENT_TYPE2) => RETURN_TYPE {

}

match STATEMENT {
  CASE => BLOCK
  CASE2 => BLOCK
  default => BLOCK
}

let mutable_letiable = VALUE
const immutable_letiable = VALUE

const list = [ITEM1, ITEM2, ITEM3]
const dictionary = {
  KEY1 => VALUE1
  KEY2 => VALUE2
  KEY3 => VALUE3
}

if STATEMENT {
  BLOCK
} else if STATEMENT {

} else {

}

while STATEMENT {

}

for const value in iterator {

}

for let i = 0 -> i32 / TRUE_FALSE_STATEMENT / i++ {
  // something with `i`
}

// Example Comment

struct STRCUTURE_NAME : InheritStruct1 | InheritStruct2 {
  ATTRIBUTE1 -> TYPE1
  ATTRIBUTE2 -> TYPE2
  ATTRIBUTE3 -> TYPE3
}

trait TRAIT_NAME {
  (argument -> ARGUMENT_TYPE, argument2 -> ARGUMENT_TYPE2) => RETURN_TYPE
  (argument1 -> ARGUMENT_TYPE1, argument22 -> ARGUMENT_TYPE22) => RETURN_TYPE_2
}

implement STRCUTURE_NAME for TRAIT_NAME | TRAIT_NAME2 {
  
}

include FILE_NAME->{
  Nested_Thing1,
  Nested_Thing2->EvenMoreNestedThing
}

macro MACRO_NAME {
  compile {
    // stuff to run on compile time
    () => {

    }
    (arg: LEXER_TYPE) => {
      
    }
  }
  main {
    () => {

    }
    (arg: LEXER_TYPE) => {
      
    }
  }
}

enum LEXER_TYPEs {
  BLOCK       (eg. {
    const msg = "Hello"
    return msg
  })
  STATEMENT   (eg. return "Hello")
  EXPRESSION  (eg. "Hello")
}

erase IDENTIFIER_TO_ERASE

public IDENTIFIER = VALUE
(or)
public ALREADY_DEFINED_IDENTIFIER

erase ALREADY_DEFINED_IDENTIFIER
// Error: cannot erase a public identifier

implement STRCUTURE_NAME and STRCUTURE_NAME2 with STRCUTURE_NAME3 for ENUM {
  Value1 => (struct1 -> STRCUTURE_NAME, struct2 -> STRCUTURE_NAME2) => STRCUTURE_NAME3 {

  }
  Value2 => (..) {...}
  default => (..) {...} // unhandled stuff if you left some stuff out
}

// This would be built in
enum OPERATORS {
  Addition,
  Subtraction,
  Multiplication,
  Division
}

enum TYPES {
  u4, u8, u16, u32, u64, u128,
  i4, i8, i16, i32, i64, i128,
  f4, f8, f16, f32, f64, f128,
  str, bool
}


if thing1 or thing2 {
 // either or
}
if thing1 and thing2 {
 // both
}

----- EXAMPLES ------

include std->io

let thing -> i32 = 123
const thing2 -> str = "Hello World"
let thing3 -> bool = true
const thing4 -> bool = false
let thing5 -> f16 = 4.5
const thing6 = 255 -> u8
let thing7 = -12343920 -> i64
const thing8 -> str[] = [1, 2, "Hello"]
let thing9 -> <str | u8 -> u8> = {
  "Lmao" => 12
  24 => 45
}
if 5 > 3 {
  io->out("Hello")
} else {
  // else block
}

if 3 != 3 {

} else if 7 > 5 {

} else {

}

for let i = 0 -> i32 / i < 25 / i++ {
  io->out(i)
}

let i = 0 -> i32
while i < 25 {
  io->out(i)
  i++
}
erase i

match 5 == 5 {
  true => {

  }
  false => {

  }
}

const msg = "Hello World"
io->out(msg)

include math->{constants->{E, PI}, pow}

public thing_available_with_include = 12

struct customStruct {
  x -> i32
  y -> i32
}
struct customStruct2: customStruct {}
struct customStruct3: customStruct {}

// for this example customStruct, customStruct2 & customStruct3 are the same content wise

implement customStruct and customStruct2 with customStruct3 for OPERATORS {
  Addition => (a -> customStruct, b -> customStruct2) => customStruct3 {
    return customStruct3 {
      x -> a.x + b.x
      y -> a.y + b.y
    }
  }
  Subtraction => (..) {...}
  Multiplication => (..) {...}
  Division => (..) {...}
}

io->out(customStruct { x -> 1, y -> 2 } + customStruct { x -> 2, y -> 8 })
// Output:
// customStruct { x -> 3, y -> 10 }

enum customOperations {
  IDK,
  WhatOperator,
  ButYouGet,
  TheGist
}

implement customStruct and customStruct2 with customStruct for customOperations {
  IDK => (..) {...}
  WhatOperator => (..) {...}
  ButYouGet => (..) {...}
  TheGist => (..) {...}
}

io->out(customStruct { x -> 2, y -> 15 } customOperations.WhatOperator customStruct2 { x -> 1, y -> 2 })
// LHS operator RHS